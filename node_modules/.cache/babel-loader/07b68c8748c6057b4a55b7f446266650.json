{"ast":null,"code":"var _jsxFileName = \"/home/aleks/Desktop/11v/react-task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []);\n\n  const fetchTasks = async () => {\n    const res = await fetch(\"http://localhost:5000/tasks\");\n    const data = await res.json();\n    return data;\n  };\n\n  const addTask = async task => {\n    const res = await fetch(\"http://localhost:5000/tasks\", {\n      method: \"POST\"\n    });\n  };\n\n  const deleteTask = async id => {\n    await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: 'DELETE',\n      headers: {\n        \"Content-type\": \"application.json\"\n      },\n      body: JSON.stringify(task)\n    });\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n\n  const toggleReminder = id => {\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: !task.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onAdd: () => setShowAddTask(!showAddTask),\n      showAdd: showAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 23\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onToggle: toggleReminder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 28\n    }, this) : \"No tasks to show\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"XxQ11t0NkIuGiEb1uKF3syXqjYc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/aleks/Desktop/11v/react-task-tracker/src/App.js"],"names":["useState","useEffect","Header","Tasks","AddTask","App","showAddTask","setShowAddTask","tasks","setTasks","getTasks","tasksFromServer","fetchTasks","res","fetch","data","json","addTask","task","method","deleteTask","id","headers","body","JSON","stringify","filter","toggleReminder","map","reminder","length"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,WAAD,EAAeC,cAAf,IAAiCP,QAAQ,CAAC,KAAD,CAA/C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,QAAQ,GAAG,YAAY;AAC3B,YAAMC,eAAe,GAAG,MAAMC,UAAU,EAAxC;AACAH,MAAAA,QAAQ,CAACE,eAAD,CAAR;AACD,KAHD;;AAICD,IAAAA,QAAQ;AACV,GANQ,EAMN,EANM,CAAT;;AAQA,QAAME,UAAU,GAAG,YAAY;AAC7B,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,6BAAD,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACA,WAAOD,IAAP;AACD,GAJD;;AAMA,QAAME,OAAO,GAAG,MAAOC,IAAP,IAAgB;AAC9B,UAAML,GAAG,GAAG,MAAMC,KAAK,CAAC,6BAAD,EAAgC;AAACK,MAAAA,MAAM,EAAE;AAAT,KAAhC,CAAvB;AACD,GAFD;;AAIA,QAAMC,UAAU,GAAG,MAAOC,EAAP,IAAc;AAC/B,UAAMP,KAAK,CAAE,+BAA8BO,EAAG,EAAnC,EAAuC;AAChDF,MAAAA,MAAM,EAAE,QADwC;AAEhDG,MAAAA,OAAO,EAAE;AACP,wBAAiB;AADV,OAFuC;AAKhDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAf;AAL0C,KAAvC,CAAX;AAQAT,IAAAA,QAAQ,CAACD,KAAK,CAACkB,MAAN,CAAcR,IAAD,IAAUA,IAAI,CAACG,EAAL,KAAWA,EAAlC,CAAD,CAAR;AACD,GAVD;;AAYA,QAAMM,cAAc,GAAIN,EAAD,IAAQ;AAC7BZ,IAAAA,QAAQ,CAACD,KAAK,CAACoB,GAAN,CAAYV,IAAD,IAAUA,IAAI,CAACG,EAAL,KAAYA,EAAZ,GAAiB,EAAC,GAAGH,IAAJ;AAAUW,MAAAA,QAAQ,EAAE,CAACX,IAAI,CAACW;AAA1B,KAAjB,GAAuDX,IAA5E,CAAD,CAAR;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE,QAAC,MAAD;AACA,MAAA,KAAK,EAAE,MAAMX,cAAc,CAAC,CAACD,WAAF,CAD3B;AAEA,MAAA,OAAO,EAAIA;AAFX;AAAA;AAAA;AAAA;AAAA,YADF,EAKGA,WAAW,iBAAI,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEW;AAAhB;AAAA;AAAA;AAAA;AAAA,YALlB,EAMGT,KAAK,CAACsB,MAAN,GAAe,CAAf,gBAAoB,QAAC,KAAD;AACnB,MAAA,KAAK,EAAItB,KADU;AAEnB,MAAA,QAAQ,EAAIY,UAFO;AAGnB,MAAA,QAAQ,EAAIO;AAHO;AAAA;AAAA;AAAA;AAAA,YAApB,GAKC,kBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CAvDD;;GAAMtB,G;;KAAAA,G;AAyDN,eAAeA,GAAf","sourcesContent":["import {useState, useEffect} from 'react'\nimport Header from './components/Header'\nimport Tasks from './components/Tasks'\nimport AddTask from './components/AddTask'\n\nconst App = () => {\n  const [showAddTask , setShowAddTask] = useState(false)\n  const [tasks, setTasks] = useState([])\n\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks()\n      setTasks(tasksFromServer)\n    } \n     getTasks()\n  }, [])\n\n  const fetchTasks = async () => {\n    const res = await fetch(\"http://localhost:5000/tasks\")\n    const data = await res.json()\n    return data\n  }\n\n  const addTask = async (task) => {\n    const res = await fetch(\"http://localhost:5000/tasks\", {method: \"POST\"})\n  }\n\n  const deleteTask = async (id) => {\n    await fetch(`http://localhost:5000/tasks/${id}`,  {\n      method: 'DELETE',\n      headers: {\n        \"Content-type\" : \"application.json\"\n      },\n      body: JSON.stringify(task)\n    })\n\n    setTasks(tasks.filter((task) => task.id!== id))\n  }\n\n  const toggleReminder = (id) => {\n    setTasks(tasks.map( (task) => task.id === id ? {...task, reminder: !task.reminder} : task))\n  }\n\n  return (\n    <div className=\"container\">\n      <Header \n      onAdd={() => setShowAddTask(!showAddTask)}\n      showAdd = {showAddTask}\n      />\n      {showAddTask && <AddTask onAdd={addTask} />}\n      {tasks.length > 0 ? (<Tasks \n        tasks = {tasks}\n        onDelete = {deleteTask}\n        onToggle = {toggleReminder}\n      />) : (\n        \"No tasks to show\"\n      )\n      }\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}