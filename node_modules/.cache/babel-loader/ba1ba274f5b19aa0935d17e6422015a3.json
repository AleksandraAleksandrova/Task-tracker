{"ast":null,"code":"var _jsxFileName = \"/home/aleks/Desktop/11v/react-task-tracker/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffects } from 'react';\nimport Header from './components/Header';\nimport Tasks from './components/Tasks';\nimport AddTask from './components/AddTask';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n\n  const addTask = task => {\n    const id = Math.floor(Math.random() * 10000 + 1);\n    const newTask = {\n      id,\n      ...task\n    };\n    setTasks([...tasks, newTask]);\n  };\n\n  const deleteTask = id => {\n    setTasks(tasks.filter(task => task.id !== id));\n  };\n\n  const toggleReminder = id => {\n    setTasks(tasks.map(task => task.id === id ? { ...task,\n      reminder: !task.reminder\n    } : task));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onAdd: () => setShowAddTask(!showAddTask),\n      showAdd: showAddTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), showAddTask && /*#__PURE__*/_jsxDEV(AddTask, {\n      onAdd: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 23\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(Tasks, {\n      tasks: tasks,\n      onDelete: deleteTask,\n      onToggle: toggleReminder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 28\n    }, this) : \"No tasks to show\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"MQEp8608Hczz3vwEWI8eP6Oegsk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/aleks/Desktop/11v/react-task-tracker/src/App.js"],"names":["useState","useEffects","Header","Tasks","AddTask","App","showAddTask","setShowAddTask","tasks","setTasks","addTask","task","id","Math","floor","random","newTask","deleteTask","filter","toggleReminder","map","reminder","length"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,UAAlB,QAAmC,OAAnC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,WAAD,EAAeC,cAAf,IAAiCP,QAAQ,CAAC,KAAD,CAA/C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,EAAD,CAAlC;;AAEA,QAAMU,OAAO,GAAIC,IAAD,IAAU;AACxB,UAAMC,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,KAAhB,GAAwB,CAAnC,CAAX;AACA,UAAMC,OAAO,GAAG;AAACJ,MAAAA,EAAD;AAAK,SAAGD;AAAR,KAAhB;AACAF,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWQ,OAAX,CAAD,CAAR;AACD,GAJD;;AAMA,QAAMC,UAAU,GAAIL,EAAD,IAAQ;AACzBH,IAAAA,QAAQ,CAACD,KAAK,CAACU,MAAN,CAAcP,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAWA,EAAlC,CAAD,CAAR;AACD,GAFD;;AAIA,QAAMO,cAAc,GAAIP,EAAD,IAAQ;AAC7BH,IAAAA,QAAQ,CAACD,KAAK,CAACY,GAAN,CAAYT,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EAAZ,GAAiB,EAAC,GAAGD,IAAJ;AAAUU,MAAAA,QAAQ,EAAE,CAACV,IAAI,CAACU;AAA1B,KAAjB,GAAuDV,IAA5E,CAAD,CAAR;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE,QAAC,MAAD;AACA,MAAA,KAAK,EAAE,MAAMJ,cAAc,CAAC,CAACD,WAAF,CAD3B;AAEA,MAAA,OAAO,EAAIA;AAFX;AAAA;AAAA;AAAA;AAAA,YADF,EAKGA,WAAW,iBAAI,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEI;AAAhB;AAAA;AAAA;AAAA;AAAA,YALlB,EAMGF,KAAK,CAACc,MAAN,GAAe,CAAf,gBAAoB,QAAC,KAAD;AACnB,MAAA,KAAK,EAAId,KADU;AAEnB,MAAA,QAAQ,EAAIS,UAFO;AAGnB,MAAA,QAAQ,EAAIE;AAHO;AAAA;AAAA;AAAA;AAAA,YAApB,GAKC,kBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CAnCD;;GAAMd,G;;KAAAA,G;AAqCN,eAAeA,GAAf","sourcesContent":["import {useState, useEffects} from 'react'\nimport Header from './components/Header'\nimport Tasks from './components/Tasks'\nimport AddTask from './components/AddTask'\n\nconst App = () => {\n  const [showAddTask , setShowAddTask] = useState(false)\n  const [tasks, setTasks] = useState([])\n\n  const addTask = (task) => {\n    const id = Math.floor(Math.random() * 10000 + 1)\n    const newTask = {id, ...task}\n    setTasks([...tasks, newTask])\n  }\n\n  const deleteTask = (id) => {\n    setTasks(tasks.filter((task) => task.id!== id))\n  }\n\n  const toggleReminder = (id) => {\n    setTasks(tasks.map( (task) => task.id === id ? {...task, reminder: !task.reminder} : task))\n  }\n\n  return (\n    <div className=\"container\">\n      <Header \n      onAdd={() => setShowAddTask(!showAddTask)}\n      showAdd = {showAddTask}\n      />\n      {showAddTask && <AddTask onAdd={addTask} />}\n      {tasks.length > 0 ? (<Tasks \n        tasks = {tasks}\n        onDelete = {deleteTask}\n        onToggle = {toggleReminder}\n      />) : (\n        \"No tasks to show\"\n      )\n      }\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}